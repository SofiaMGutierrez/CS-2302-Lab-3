#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Oct  5 17:19:50 2019
Course: CS 2302
Author: Sofia Gutierrez
Lab #3: Program created to contain a SortedList class
and a normal List class with multiple functions each
Instructor: Olac Fuentes
T.A.: Anindita Nath
"""
import random
import math
import timeit

class Node(object):
    # Constructor
    def __init__(self, data, next=None):
        self.data = data
        self.next = next

'''
The following class is for a sorted list
''' 
class SortedList(object):   
    # Constructor
    def __init__(self,head = None,tail = None):    
        self.head = head
        self.tail = tail

    def Print(self):
        t = self.head
        while t != None:
            print(t.data, end = ' ')
            t = t.next
        print()
        
    def Append(self,x):
        if self.head is None:
            self.head = Node(x)
            self.tail = self.head
        else:
            self.tail.next = Node(x)
            self.tail = self.tail.next
            
    def AppendList(self,python_list):
        for d in python_list:
            self.Append(d)

    #First examines if the list is empty, if so, both the head and
    #tail will be set to contain a new Node with the element i
    
    #If head is not empty, in other words if there exits a list
    #then a new Node will be created containing the element i
    #and will then be compared to the data within head
    #If this element i is less than the head data then the new Node
    #containing the element i will be inserted before the head
    #The new Node that was created will now be head
    
    #If the element is greater than the head, then the list will be
    #incremented through until an element within the list is found
    #to be greater than the element i
    #If this element is found, then the Node containing element i
    #will be placed before the Node that was found to be greater
    #If this element is not found, then element i will be set to
    #the end of the list, or the tail
    def Insert(self, i):
        if self.head == None:
            self.head = Node(i)
            self.tail = Node(i)
        else:
            element = Node(i)
            if element.data < self.head.data:
                temp = self.head
                self.head = element
                self.head.next = temp
            else:
                t = self.head
                while t.data < element.data and t.next != None:
                    t = t.next
                if t.data < element.data and t.next == None:
                    t.next = element
                    tail = element
                else:
                    element.next = t.next
                    t.next = element

    #If head is not empty then the list will be incremented through
    #until either the next Node does not exist or the integer i that
    #was recieved matches the next Node
    #If this next Node matches the integer i the the next Node will
    #be replaced by the next next Node therefore deleting the Node
    #that contained the integer i
    def Delete(self, i):
        if self.head == None:
            print("List is empty")
        else:
            t = self.head
            while t.next != None:
                if t.next.data == i:
                    t.next = t.next.next
                else:
                    t = t.next

    def Merge(self, M):
        t = self.head
        while t != None:
            L1.Insert(t.data)

    def IndexOf(self, i):
        if self.head == None:
            return -1
        counter = 0
        t = self.head
        while t != None:
            if counter == i:
                return t.data
            counter += 1
            t = t.next
        return -1

    def Clear(self):
        self.head = None
        self.tail = None

    def Min(self):
        if self.head == None:
            return math.inf
        else:
            return self.head.data

    def Max(self):
        if self.head == None:
            return math.inf
        else:
            return self.tail.data

    def HasDuplicates(self):
        if self.head == None:
            return False
        else:
            t = self.head
            while t.next != None:
                if t.data == t.next.data:
                    return True
                t = t.next
            return False

    #returns math.inf if k exceeds list size
    #If not the list will be incremented by 1 until k matches the
    #counter, then the data of the specific Node will be returned
    def Select(self, k):
        i = k - 1
        if i >= 0:
            counter = 0
            t = self.head
            while t.next != None and counter != i:
                t = t.next
                counter += 1
            if counter == i:
                return t.data
            else:
                return math.inf
        else:
          return math.inf

'''
The following class is for an unsorted list
'''
class List(object):   
    # Constructor
    def __init__(self,head = None,tail = None):    
        self.head = head
        self.tail = tail

    def Print(self):
        t = self.head
        while t != None:
            print(t.data, end = ' ')
            t = t.next
        print()
        
    def Append(self,x):
        if self.head is None:
            self.head = Node(x)
            self.tail = self.head
        else:
            self.tail.next = Node(x)
            self.tail = self.tail.next
            
    def AppendList(self,python_list):
        for d in python_list:
            self.Append(d)

    def Insert(self, i):
        element = Node(i)
        if self.head == None: 
            self.head = element 
            return
        t = self.head 
        while t.next != None: 
            t = t.next
        t.next = element

    def Delete(self, i):
        if self.head == None:
            print("List is empty")
        else:
            t = self.head
            while t.next != None:
                if t.next.data == i:
                    t.next = t.next.next
                else:
                    t = t.next

    def Merge(self, M):
        t = self.head
        while t != None:
            L1.Insert(t.data)

    def IndexOf(self, i):
        t = self.head
        counter = 0
        while t != None:
            if counter == i:
                return t.data
            counter += 1
            t = t.next
        return -1

    def Clear(self):
        self.head = None
        self.tail = None

    def Min(self):
        if self.head.next == None:
            return self.head.data
        else:
            min = self.head.data
            t = self.head
            while t != None:
                if min > t.data:
                    min = t.data
                t = t.next
            return min

    def Max(self):
        if self.head.next == None:
            return self.head.data
        else:
            max = self.head.data
            t = self.head
            while t != None:
                if max < t.data:
                    max = t.data
                t = t.next
            return max

    def HasDuplicates(self):
        if self.head == None:
            return False
        else:
            t = self.head
            while t.next != None:
                if t.data == t.next.data:
                    return True
                t = t.next
            return False

    def Select(self, k):
        i = k - 1
        if i >= 0:
            counter = 0
            t = self.head
            while t.next != None and counter != i:
                t = t.next
                counter += 1
            if counter == i:
                return t.data
            else:
                return math.inf
        else:
          return math.inf


if __name__ == "__main__":
    
    i = random.sample(range(0, 10), 5)
    
    L1 = SortedList() #creates a list of type SortedList
    L2 = List() #creates a list of type List
    L2.AppendList(i)
    i.sort()
    L1.AppendList(i) #appends to unsorted list
    
    M1 = SortedList()
    M1.AppendList(i)
    
    
    print("Select what you would like to do with the sorted and unsorted list: ")
    print("1: Insert")
    print("2: Delete")
    print("3: Merge")
    print("4: IndexOf")
    print("5: Clear")
    print("6: Min")
    print("7: Max")
    print("8: HasDuplicates")
    print("9: Select")
    user_choice = int(input("Enter a menu number option: "))
    
    if user_choice == 1:
        #Insert for a sorted list
        print()
        print("Insert #5 for a sorted list: ")
        print()
        print("Sorted list before insert: ", end = '')
        L1.Print()
        print()
        print("Sorted list after insert:  ", end = '')
        L1.Insert(5)
        L1.Print()
        print()
        #Insert for an unsorted list
        print()
        print("Insert #5 for an unsorted list: ")
        print()
        print("Unsorted list before insert: ", end = '')
        L2.Print()
        print()
        print("Unsorted list after insert:  ", end = '')
        L2.Insert(5)
        L2.Print()
        print()
        
    elif user_choice == 2:
        #Delete for a sorted list
        print()
        print("Delete #5 for a sorted list: ")
        print()
        print("Sorted list before deletion: ", end = '')
        L1.Print()
        print()
        print("Sorted list after deletion:  ", end = '')
        L1.Delete(5)
        L1.Print()
        print()
        #Delete for an unsorted list
        print()
        print("Delete #5 for an unsorted list: ")
        print()
        print("Unsorted list before deletion: ", end = '')
        L2.Print()
        print()
        print("Unsorted list after deletion:  ", end = '')
        L2.Delete(5)
        L2.Print()
        print()
        
    elif user_choice == 3:
        #Merge for a sorted list
        print()
        print("Merge for a sorted list: ")
        print()
        print("Sorted list before merge: ")
        M1.Print()
        print()
        print("Sorted list after merge: ")
        M1.Merge(L1)
        M1.Print()
        print()
        #Merge for an unsorted list
        print()
        print("Merge for an unsorted list: ")
        print()
        print("Unsorted list before merge: ")
        M1.Print()
        print()
        print("Unsorted list after merge: ")
        M1.Merge(L2)
        M1.Print()
        print()

    elif user_choice == 4:
        #IndexOf for a sorted list
        print()
        print("Sorted list: ", end = '')
        L1.Print()
        print("Element at index 3: ", end = '')
        print(L1.IndexOf(3))
        print()
        #IndexOf for an unsorted list
        print()
        print("Unsorted list: ", end = '')
        L2.Print()
        print("Element at index 3: ", end = '')
        print(L2.IndexOf(3))
        print()

    elif user_choice == 5:
        #Clear for a sorted list
        print()
        print("Sorted list: ", end = '')
        L1.Print()
        print()
        print("Sorted list after clear: ", end = '')
        L1.Clear()
        L1.Print()
        print()
        #Clear for an unsorted list
        print()
        print("Unsorted list: ", end = '')
        L2.Print()
        print()
        print("Unsorted list after clear: ", end = '')
        L2.Clear()
        L2.Print()
        print()

    elif user_choice == 6:
        #Min for a sorted list
        print()
        print("Sorted list: ", end = '')
        L1.Print()
        print("Smallest element in the sorted list: ", end = '')
        print(L1.Min())
        print()
        #Min for an unsorted list
        print()
        print("Unsorted list: ", end = '')
        L2.Print()
        print("Smallest element in the unsorted list: ", end = '')
        print(L2.Min())
        print()

    elif user_choice == 7:
        #Max for a sorted list
        print()
        print("Sorted list: ", end = '')
        L1.Print()
        print("Largest element in the sorted list: ", end = '')
        print(L1.Max())
        print()
        #Max for an unsorted list
        print()
        print("Unsorted list: ", end = '')
        L2.Print()
        print("Largest element in the unsorted list: ", end = '')
        print(L2.Max())
        print()

    elif user_choice == 8:
        #HasDuplicates for a sorted list
        print()
        print("Sorted list: ", end = '')
        L1.Print()
        print("True or False: ", end = '')
        print(L1.HasDuplicates())
        print()
        #HasDuplicates for an unsorted list
        print()
        print("Unsorted list: ", end = '')
        L2.Print()
        print("True or False: ", end = '')
        print(L2.HasDuplicates())
        print()

    elif user_choice == 9:
        #Select for a sorted list
        print()
        print("Sorted list: ", end = '')
        L1.Print()
        print("3rd smallest element in sorted list: ", end = '')
        print(L1.Select(3))
        #Select for an unsorted list
        print()
        print("Unsorted list: ", end = '')
        L2.Print()
        print("3rd smallest element in an unsorted list: ", end = '')
        print(L2.Select(3))

    else:
        print("Invalid input")